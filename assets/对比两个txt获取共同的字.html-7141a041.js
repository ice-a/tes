const n=JSON.parse(`{"key":"v-753301ee","path":"/posts/python/%E5%AF%B9%E6%AF%94%E4%B8%A4%E4%B8%AAtxt%E8%8E%B7%E5%8F%96%E5%85%B1%E5%90%8C%E7%9A%84%E5%AD%97.html","title":"对比两个txt获取共同的字","lang":"zh-CN","frontmatter":{"title":"对比两个txt获取共同的字","id":35,"alias":35,"category":["python"],"tag":["python"],"description":"import chardet # 获取文件编码 def get_file_encode(file_path): \\"\\"\\" 获取文件编码 :param file_path: 文件路径 :return: 文件编码 \\"\\"\\" with open(file_path, 'rb') as f: return chardet.detect(f.read())['encoding'] # 获取文件内容 def get_file_content(file_path): \\"\\"\\" 获取文件内容 :param file_path: 文件路径 :return: 文件内容 \\"\\"\\" # 临时存储列表 list_data = [] with open(file_path, 'r', encoding=get_file_encode(file_path)) as f: for line in f.readlines(): for word in line.replace(\\"\\\\n\\", ''): if word not in list_data: list_data.append(word) return list_data # 对比两个列表找到相同的值 def compare_list(list_1, list_2): \\"\\"\\" 对比两个列表找到相同的值 :param list_1: 列表1 :param list_2: 列表2 :return: 相同的值 \\"\\"\\" list_3 = [] for i in list_1: if i in list_2: list_3.append(i) return list_3 # 将列表数据写入到结果中 def write_result(list_data, save_result): \\"\\"\\" 将列表数据写入到结果中 :param list_data: 对比的列表文件 :param save_result:保存结果 \\"\\"\\" for word in list_data: with open(save_result, 'a', encoding='utf-8') as f: f.write(word + \\"\\\\n\\") txt1 = \\"../question1/随机汉字_1.txt\\" txt2 = \\"../question1/随机汉字_2.txt\\" save_txt = \\"../question1/结果.txt\\" list_1 = get_file_content(txt1) list_2 = get_file_content(txt2) list_3 = compare_list(list_1, list_2) write_result(list_3, save_txt)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/python/%E5%AF%B9%E6%AF%94%E4%B8%A4%E4%B8%AAtxt%E8%8E%B7%E5%8F%96%E5%85%B1%E5%90%8C%E7%9A%84%E5%AD%97.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"对比两个txt获取共同的字"}],["meta",{"property":"og:description","content":"import chardet # 获取文件编码 def get_file_encode(file_path): \\"\\"\\" 获取文件编码 :param file_path: 文件路径 :return: 文件编码 \\"\\"\\" with open(file_path, 'rb') as f: return chardet.detect(f.read())['encoding'] # 获取文件内容 def get_file_content(file_path): \\"\\"\\" 获取文件内容 :param file_path: 文件路径 :return: 文件内容 \\"\\"\\" # 临时存储列表 list_data = [] with open(file_path, 'r', encoding=get_file_encode(file_path)) as f: for line in f.readlines(): for word in line.replace(\\"\\\\n\\", ''): if word not in list_data: list_data.append(word) return list_data # 对比两个列表找到相同的值 def compare_list(list_1, list_2): \\"\\"\\" 对比两个列表找到相同的值 :param list_1: 列表1 :param list_2: 列表2 :return: 相同的值 \\"\\"\\" list_3 = [] for i in list_1: if i in list_2: list_3.append(i) return list_3 # 将列表数据写入到结果中 def write_result(list_data, save_result): \\"\\"\\" 将列表数据写入到结果中 :param list_data: 对比的列表文件 :param save_result:保存结果 \\"\\"\\" for word in list_data: with open(save_result, 'a', encoding='utf-8') as f: f.write(word + \\"\\\\n\\") txt1 = \\"../question1/随机汉字_1.txt\\" txt2 = \\"../question1/随机汉字_2.txt\\" save_txt = \\"../question1/结果.txt\\" list_1 = get_file_content(txt1) list_2 = get_file_content(txt2) list_3 = compare_list(list_1, list_2) write_result(list_3, save_txt)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-31T11:11:28.000Z"}],["meta",{"property":"article:author","content":"爱喝水的木子"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2023-08-31T11:11:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"对比两个txt获取共同的字\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-31T11:11:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"爱喝水的木子\\",\\"url\\":\\"https://lideshan.cn\\",\\"email\\":\\"muzi@lideshan.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1693480288000,"updatedTime":1693480288000,"contributors":[{"name":"爱喝水的木子","email":"50564847+ice-a@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.88,"words":264},"filePathRelative":"posts/python/对比两个txt获取共同的字.md","localizedDate":"2023年8月31日","excerpt":"<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> chardet\\n\\n\\n<span class=\\"token comment\\"># 获取文件编码</span>\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">get_file_encode</span><span class=\\"token punctuation\\">(</span>file_path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n    获取文件编码\\n    :param file_path: 文件路径\\n    :return: 文件编码\\n    \\"\\"\\"</span>\\n    <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>file_path<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'rb'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> f<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span> chardet<span class=\\"token punctuation\\">.</span>detect<span class=\\"token punctuation\\">(</span>f<span class=\\"token punctuation\\">.</span>read<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'encoding'</span><span class=\\"token punctuation\\">]</span>\\n\\n\\n<span class=\\"token comment\\"># 获取文件内容</span>\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">get_file_content</span><span class=\\"token punctuation\\">(</span>file_path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n    获取文件内容\\n    :param file_path: 文件路径\\n    :return: 文件内容\\n    \\"\\"\\"</span>\\n    <span class=\\"token comment\\"># 临时存储列表</span>\\n    list_data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>file_path<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'r'</span><span class=\\"token punctuation\\">,</span> encoding<span class=\\"token operator\\">=</span>get_file_encode<span class=\\"token punctuation\\">(</span>file_path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> f<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">for</span> line <span class=\\"token keyword\\">in</span> f<span class=\\"token punctuation\\">.</span>readlines<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">for</span> word <span class=\\"token keyword\\">in</span> line<span class=\\"token punctuation\\">.</span>replace<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n                <span class=\\"token keyword\\">if</span> word <span class=\\"token keyword\\">not</span> <span class=\\"token keyword\\">in</span> list_data<span class=\\"token punctuation\\">:</span>\\n                    list_data<span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span>word<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> list_data\\n\\n\\n<span class=\\"token comment\\"># 对比两个列表找到相同的值</span>\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">compare_list</span><span class=\\"token punctuation\\">(</span>list_1<span class=\\"token punctuation\\">,</span> list_2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n    对比两个列表找到相同的值\\n    :param list_1: 列表1\\n    :param list_2: 列表2\\n    :return: 相同的值\\n    \\"\\"\\"</span>\\n    list_3 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> list_1<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> i <span class=\\"token keyword\\">in</span> list_2<span class=\\"token punctuation\\">:</span>\\n            list_3<span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> list_3\\n\\n\\n<span class=\\"token comment\\"># 将列表数据写入到结果中</span>\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">write_result</span><span class=\\"token punctuation\\">(</span>list_data<span class=\\"token punctuation\\">,</span> save_result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n    将列表数据写入到结果中\\n    :param list_data: 对比的列表文件\\n    :param save_result:保存结果\\n    \\"\\"\\"</span>\\n    <span class=\\"token keyword\\">for</span> word <span class=\\"token keyword\\">in</span> list_data<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>save_result<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'a'</span><span class=\\"token punctuation\\">,</span> encoding<span class=\\"token operator\\">=</span><span class=\\"token string\\">'utf-8'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> f<span class=\\"token punctuation\\">:</span>\\n            f<span class=\\"token punctuation\\">.</span>write<span class=\\"token punctuation\\">(</span>word <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n\\ntxt1 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"../question1/随机汉字_1.txt\\"</span>\\ntxt2 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"../question1/随机汉字_2.txt\\"</span>\\nsave_txt <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"../question1/结果.txt\\"</span>\\n\\nlist_1 <span class=\\"token operator\\">=</span> get_file_content<span class=\\"token punctuation\\">(</span>txt1<span class=\\"token punctuation\\">)</span>\\nlist_2 <span class=\\"token operator\\">=</span> get_file_content<span class=\\"token punctuation\\">(</span>txt2<span class=\\"token punctuation\\">)</span>\\nlist_3 <span class=\\"token operator\\">=</span> compare_list<span class=\\"token punctuation\\">(</span>list_1<span class=\\"token punctuation\\">,</span> list_2<span class=\\"token punctuation\\">)</span>\\nwrite_result<span class=\\"token punctuation\\">(</span>list_3<span class=\\"token punctuation\\">,</span> save_txt<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"爱喝水的木子"},"autoDesc":true}`);export{n as data};
