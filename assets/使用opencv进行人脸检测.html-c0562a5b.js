const e=JSON.parse('{"key":"v-32b8d73c","path":"/posts/python/%E4%BD%BF%E7%94%A8opencv%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B.html","title":"使用opencv进行人脸检测","lang":"zh-CN","frontmatter":{"title":"使用opencv进行人脸检测","category":["AI"],"tag":["python","cv","检测"],"description":"对特定图像进行识别，最关键的是要有识别对象的特征文件。OpenCV已经内置了人脸识别特征文件，我们只要使用OpenCV的CascadeClassifier类即可进行识别。 语法： https://github.com/opencv/opencv.git 在这里可以下载特征文件，在data目录下 识别对象变量 = cv2.CascadeClassifier(特征文件)、、 识别对象 识别结果变量 = 识别对象变量.detectMultiScale(图片，参数1，参数2，。。。) 参数有： 　　1、scaleFactor: 其原理是系统会以不同的区块大小对图片进行扫描，在进行特征对比。此参数用户设置区块的改变倍数，如无特别需求，一般设置为1.1 　　2、minNeighbors 此为控制误检率参数，默认值为3 　　3、minSize 设置最小的识别区块 　　4、maxSize 设置最大的识别区块 　　5、flags 此参数设置检测模式，可取值如下： 　　　　　　cv2.CV_HAAR_SCALE_IMAGE 按比例检测 　　　　　　cv2.CV_HAAR_DO_CANNY_PRUNING 利用Canny 边缘检测器排除一些边缘很少或很多的图像区域 　　　　　　cv2.CV_HAAR_FIND_BIGGEST_OBJECT 只检测最大物体 　　　　　　cv2.CV_HAAR_DO_ROUGH_SEARCH 只做初步检测 face = faceCascade.detectMultiScale(image,scakeFactor=1.1,minSize=(10,10),minNeighbors=5,flags = cv2.CASCADE_SCALE_IMAGE) detectMultiScale 方法可以识别多个面部，返回值是一个列表 for (x,y,w,h) in face: x,y 表示面部区域的左上角x,y坐标；w,h表示面部区域的宽度和高度","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/python/%E4%BD%BF%E7%94%A8opencv%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"使用opencv进行人脸检测"}],["meta",{"property":"og:description","content":"对特定图像进行识别，最关键的是要有识别对象的特征文件。OpenCV已经内置了人脸识别特征文件，我们只要使用OpenCV的CascadeClassifier类即可进行识别。 语法： https://github.com/opencv/opencv.git 在这里可以下载特征文件，在data目录下 识别对象变量 = cv2.CascadeClassifier(特征文件)、、 识别对象 识别结果变量 = 识别对象变量.detectMultiScale(图片，参数1，参数2，。。。) 参数有： 　　1、scaleFactor: 其原理是系统会以不同的区块大小对图片进行扫描，在进行特征对比。此参数用户设置区块的改变倍数，如无特别需求，一般设置为1.1 　　2、minNeighbors 此为控制误检率参数，默认值为3 　　3、minSize 设置最小的识别区块 　　4、maxSize 设置最大的识别区块 　　5、flags 此参数设置检测模式，可取值如下： 　　　　　　cv2.CV_HAAR_SCALE_IMAGE 按比例检测 　　　　　　cv2.CV_HAAR_DO_CANNY_PRUNING 利用Canny 边缘检测器排除一些边缘很少或很多的图像区域 　　　　　　cv2.CV_HAAR_FIND_BIGGEST_OBJECT 只检测最大物体 　　　　　　cv2.CV_HAAR_DO_ROUGH_SEARCH 只做初步检测 face = faceCascade.detectMultiScale(image,scakeFactor=1.1,minSize=(10,10),minNeighbors=5,flags = cv2.CASCADE_SCALE_IMAGE) detectMultiScale 方法可以识别多个面部，返回值是一个列表 for (x,y,w,h) in face: x,y 表示面部区域的左上角x,y坐标；w,h表示面部区域的宽度和高度"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-31T11:11:28.000Z"}],["meta",{"property":"article:author","content":"爱喝水的木子"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"cv"}],["meta",{"property":"article:tag","content":"检测"}],["meta",{"property":"article:modified_time","content":"2023-08-31T11:11:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用opencv进行人脸检测\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-31T11:11:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"爱喝水的木子\\",\\"url\\":\\"https://lideshan.cn\\",\\"email\\":\\"muzi@lideshan.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1693480288000,"updatedTime":1693480288000,"contributors":[{"name":"爱喝水的木子","email":"50564847+ice-a@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"posts/python/使用opencv进行人脸检测.md","localizedDate":"2023年8月31日","excerpt":"<p>对特定图像进行识别，最关键的是要有识别对象的特征文件。OpenCV已经内置了人脸识别特征文件，我们只要使用OpenCV的CascadeClassifier类即可进行识别。<br>\\n语法：<br>\\n<a href=\\"https://github.com/opencv/opencv.git\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/opencv/opencv.git</a>  在这里可以下载特征文件，在data目录下<br>\\n识别对象变量 = cv2.CascadeClassifier(特征文件)、、<br>\\n识别对象<br>\\n识别结果变量 = 识别对象变量.detectMultiScale(图片，参数1，参数2，。。。)<br>\\n参数有：<br>\\n　　1、scaleFactor:  其原理是系统会以不同的区块大小对图片进行扫描，在进行特征对比。此参数用户设置区块的改变倍数，如无特别需求，一般设置为1.1<br>\\n　　2、minNeighbors  此为控制误检率参数，默认值为3<br>\\n　　3、minSize  设置最小的识别区块<br>\\n　　4、maxSize  设置最大的识别区块<br>\\n　　5、flags  此参数设置检测模式，可取值如下：<br>\\n　　　　　　cv2.CV_HAAR_SCALE_IMAGE   按比例检测<br>\\n　　　　　　cv2.CV_HAAR_DO_CANNY_PRUNING  利用Canny 边缘检测器排除一些边缘很少或很多的图像区域<br>\\n　　　　　　cv2.CV_HAAR_FIND_BIGGEST_OBJECT   只检测最大物体<br>\\n　　　　　　cv2.CV_HAAR_DO_ROUGH_SEARCH  只做初步检测<br>\\nface = faceCascade.detectMultiScale(image,scakeFactor=1.1,minSize=(10,10),minNeighbors=5,flags = cv2.CASCADE_SCALE_IMAGE)<br>\\ndetectMultiScale 方法可以识别多个面部，返回值是一个列表<br>\\nfor (x,y,w,h) in face:<br>\\nx,y 表示面部区域的左上角x,y坐标；w,h表示面部区域的宽度和高度</p>","copyright":{"author":"爱喝水的木子"},"autoDesc":true}');export{e as data};
