const n=JSON.parse(`{"key":"v-d0dc34e0","path":"/posts/AI/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%B5%86%E7%9A%84%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%94%9F%E6%88%90%E6%83%85%E8%AF%9D%E3%80%81%E5%AF%B9%E8%81%94%E7%AD%89%E4%BF%A1%E6%81%AF.html","title":"利用百度飞浆的预训练模型生成情话、对联等信息","lang":"zh-CN","frontmatter":{"title":"利用百度飞浆的预训练模型生成情话、对联等信息","category":["python"],"tag":["python","paddlehub","模型"],"description":"# anconda '''step1: 安装paddlepaddle conda create -n paddle python=3.6 conda activate paddle pip install paddlepaddle -i https://pypi.tuna.tsinghua.edu.cn/simple pip install paddlehub -i https://pypi.tuna.tsinghua.edu.cn/simple pip install pillow ''' import paddlehub as hub class HubUtils(object): def __init__(self): self.hub = hub #初始化时需要加载模型 self.module_love_words = self.hub.Module(name=\\"ernie_gen_lover_words\\") # 情话 self.module_poetry = self.hub.Module(name=\\"ernie_gen_poetry\\") # 诗歌 self.module_acrostic_poetry = self.hub.Module(name=\\"ernie_gen_acrostic_poetry\\") # 藏头诗 self.module_couplets = self.hub.Module(name=\\"ernie_gen_couplet\\") # 对联 def GetLoveWords(self,text,size=5): results = self.module_love_words.generate(texts=[text], use_gpu=False, beam_width=size) return results[0] def GetAcrostic(self,text,line=4,word=7,size=1): #默认返回一首 self.module_acrostic = self.hub.module = hub.Module(name=\\"ernie_gen_acrostic_poetry\\", line=line, word=word) results = self.module_acrostic.generate(texts=[text], use_gpu=False, beam_width=size) return results[0] def GetAcrostic_poetry(self,text,line=4, word=7): self.module_acrostic_poetry = self.hub.module = hub.Module(name=\\"ernie_gen_acrostic_poetry\\", line=line, word=word) results = self.module_acrostic_poetry.generate(texts=[text], use_gpu=False, beam_width=1) return results[0] def GetPoetry(self,curx,size=1): #输入关键句，词即可生成诗歌，默认一首 results = self.module_poetry.generate(texts=[curx], use_gpu=False, beam_width=size) return results[0] def GetCouplet(self,up_couplet,size=1): #输入上联给出下联,默认给一个 results = self.module_couplets.generate(texts=[up_couplet], use_gpu=False, beam_width=size) return results[0] if __name__==\\"__main__\\": Hub = HubUtils() while True: input_ = input(\\"请选择功能: 1.情话 2.诗歌 3.藏头诗 4.对联 5.退出\\\\n\\") if input_ == \\"1\\": input_ = input(\\"请输入情话关键词:\\\\n&gt;&gt;&gt;\\") print(Hub.GetLoveWords(input_)) elif input_ == \\"2\\": input_ = input(\\"请输入诗歌关键词:\\\\n&gt;&gt;&gt;\\") print(Hub.GetPoetry(input_)) elif input_ == \\"3\\": input_ = input(\\"请输入藏头诗关键词:\\\\n&gt;&gt;&gt;\\") print(Hub.GetAcrostic_poetry(input_)) elif input_ == \\"4\\": input_ = input(\\"请输入上联:\\\\n&gt;&gt;&gt;\\") print(Hub.GetCouplet(input_)) elif input_ == \\"5\\": break","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/AI/%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%B5%86%E7%9A%84%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%94%9F%E6%88%90%E6%83%85%E8%AF%9D%E3%80%81%E5%AF%B9%E8%81%94%E7%AD%89%E4%BF%A1%E6%81%AF.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"利用百度飞浆的预训练模型生成情话、对联等信息"}],["meta",{"property":"og:description","content":"# anconda '''step1: 安装paddlepaddle conda create -n paddle python=3.6 conda activate paddle pip install paddlepaddle -i https://pypi.tuna.tsinghua.edu.cn/simple pip install paddlehub -i https://pypi.tuna.tsinghua.edu.cn/simple pip install pillow ''' import paddlehub as hub class HubUtils(object): def __init__(self): self.hub = hub #初始化时需要加载模型 self.module_love_words = self.hub.Module(name=\\"ernie_gen_lover_words\\") # 情话 self.module_poetry = self.hub.Module(name=\\"ernie_gen_poetry\\") # 诗歌 self.module_acrostic_poetry = self.hub.Module(name=\\"ernie_gen_acrostic_poetry\\") # 藏头诗 self.module_couplets = self.hub.Module(name=\\"ernie_gen_couplet\\") # 对联 def GetLoveWords(self,text,size=5): results = self.module_love_words.generate(texts=[text], use_gpu=False, beam_width=size) return results[0] def GetAcrostic(self,text,line=4,word=7,size=1): #默认返回一首 self.module_acrostic = self.hub.module = hub.Module(name=\\"ernie_gen_acrostic_poetry\\", line=line, word=word) results = self.module_acrostic.generate(texts=[text], use_gpu=False, beam_width=size) return results[0] def GetAcrostic_poetry(self,text,line=4, word=7): self.module_acrostic_poetry = self.hub.module = hub.Module(name=\\"ernie_gen_acrostic_poetry\\", line=line, word=word) results = self.module_acrostic_poetry.generate(texts=[text], use_gpu=False, beam_width=1) return results[0] def GetPoetry(self,curx,size=1): #输入关键句，词即可生成诗歌，默认一首 results = self.module_poetry.generate(texts=[curx], use_gpu=False, beam_width=size) return results[0] def GetCouplet(self,up_couplet,size=1): #输入上联给出下联,默认给一个 results = self.module_couplets.generate(texts=[up_couplet], use_gpu=False, beam_width=size) return results[0] if __name__==\\"__main__\\": Hub = HubUtils() while True: input_ = input(\\"请选择功能: 1.情话 2.诗歌 3.藏头诗 4.对联 5.退出\\\\n\\") if input_ == \\"1\\": input_ = input(\\"请输入情话关键词:\\\\n&gt;&gt;&gt;\\") print(Hub.GetLoveWords(input_)) elif input_ == \\"2\\": input_ = input(\\"请输入诗歌关键词:\\\\n&gt;&gt;&gt;\\") print(Hub.GetPoetry(input_)) elif input_ == \\"3\\": input_ = input(\\"请输入藏头诗关键词:\\\\n&gt;&gt;&gt;\\") print(Hub.GetAcrostic_poetry(input_)) elif input_ == \\"4\\": input_ = input(\\"请输入上联:\\\\n&gt;&gt;&gt;\\") print(Hub.GetCouplet(input_)) elif input_ == \\"5\\": break"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-31T11:11:28.000Z"}],["meta",{"property":"article:author","content":"爱喝水的木子"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"paddlehub"}],["meta",{"property":"article:tag","content":"模型"}],["meta",{"property":"article:modified_time","content":"2023-08-31T11:11:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"利用百度飞浆的预训练模型生成情话、对联等信息\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-31T11:11:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"爱喝水的木子\\",\\"url\\":\\"https://lideshan.cn\\",\\"email\\":\\"muzi@lideshan.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1693480288000,"updatedTime":1693480288000,"contributors":[{"name":"爱喝水的木子","email":"50564847+ice-a@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.17,"words":351},"filePathRelative":"posts/AI/利用百度飞浆的预训练模型生成情话、对联等信息.md","localizedDate":"2023年8月31日","excerpt":"<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token comment\\"># anconda</span>\\n<span class=\\"token triple-quoted-string string\\">'''step1: 安装paddlepaddle\\nconda create -n paddle python=3.6\\nconda activate paddle\\npip install paddlepaddle -i https://pypi.tuna.tsinghua.edu.cn/simple\\npip install paddlehub -i https://pypi.tuna.tsinghua.edu.cn/simple\\npip install pillow\\n'''</span>\\n<span class=\\"token keyword\\">import</span> paddlehub <span class=\\"token keyword\\">as</span> hub\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">HubUtils</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">object</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>hub <span class=\\"token operator\\">=</span> hub\\n        <span class=\\"token comment\\">#初始化时需要加载模型</span>\\n        self<span class=\\"token punctuation\\">.</span>module_love_words <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>hub<span class=\\"token punctuation\\">.</span>Module<span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ernie_gen_lover_words\\"</span><span class=\\"token punctuation\\">)</span>          <span class=\\"token comment\\"># 情话</span>\\n        self<span class=\\"token punctuation\\">.</span>module_poetry <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>hub<span class=\\"token punctuation\\">.</span>Module<span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ernie_gen_poetry\\"</span><span class=\\"token punctuation\\">)</span>                   <span class=\\"token comment\\"># 诗歌</span>\\n        self<span class=\\"token punctuation\\">.</span>module_acrostic_poetry <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>hub<span class=\\"token punctuation\\">.</span>Module<span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ernie_gen_acrostic_poetry\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\"># 藏头诗</span>\\n        self<span class=\\"token punctuation\\">.</span>module_couplets <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>hub<span class=\\"token punctuation\\">.</span>Module<span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ernie_gen_couplet\\"</span><span class=\\"token punctuation\\">)</span>                <span class=\\"token comment\\"># 对联</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">GetLoveWords</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span>text<span class=\\"token punctuation\\">,</span>size<span class=\\"token operator\\">=</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        results <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>module_love_words<span class=\\"token punctuation\\">.</span>generate<span class=\\"token punctuation\\">(</span>texts<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span>text<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> use_gpu<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span> beam_width<span class=\\"token operator\\">=</span>size<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> results<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">GetAcrostic</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span>text<span class=\\"token punctuation\\">,</span>line<span class=\\"token operator\\">=</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span>word<span class=\\"token operator\\">=</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span>size<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token comment\\">#默认返回一首</span>\\n        self<span class=\\"token punctuation\\">.</span>module_acrostic <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>hub<span class=\\"token punctuation\\">.</span>module <span class=\\"token operator\\">=</span> hub<span class=\\"token punctuation\\">.</span>Module<span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ernie_gen_acrostic_poetry\\"</span><span class=\\"token punctuation\\">,</span> line<span class=\\"token operator\\">=</span>line<span class=\\"token punctuation\\">,</span> word<span class=\\"token operator\\">=</span>word<span class=\\"token punctuation\\">)</span>\\n        results <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>module_acrostic<span class=\\"token punctuation\\">.</span>generate<span class=\\"token punctuation\\">(</span>texts<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span>text<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> use_gpu<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span> beam_width<span class=\\"token operator\\">=</span>size<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> results<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">GetAcrostic_poetry</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span>text<span class=\\"token punctuation\\">,</span>line<span class=\\"token operator\\">=</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> word<span class=\\"token operator\\">=</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>module_acrostic_poetry <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>hub<span class=\\"token punctuation\\">.</span>module <span class=\\"token operator\\">=</span> hub<span class=\\"token punctuation\\">.</span>Module<span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ernie_gen_acrostic_poetry\\"</span><span class=\\"token punctuation\\">,</span> line<span class=\\"token operator\\">=</span>line<span class=\\"token punctuation\\">,</span> word<span class=\\"token operator\\">=</span>word<span class=\\"token punctuation\\">)</span>\\n        results <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>module_acrostic_poetry<span class=\\"token punctuation\\">.</span>generate<span class=\\"token punctuation\\">(</span>texts<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span>text<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> use_gpu<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span> beam_width<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> results<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">GetPoetry</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span>curx<span class=\\"token punctuation\\">,</span>size<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token comment\\">#输入关键句，词即可生成诗歌，默认一首</span>\\n        results <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>module_poetry<span class=\\"token punctuation\\">.</span>generate<span class=\\"token punctuation\\">(</span>texts<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span>curx<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> use_gpu<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span> beam_width<span class=\\"token operator\\">=</span>size<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> results<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">GetCouplet</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span>up_couplet<span class=\\"token punctuation\\">,</span>size<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token comment\\">#输入上联给出下联,默认给一个</span>\\n        results <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>module_couplets<span class=\\"token punctuation\\">.</span>generate<span class=\\"token punctuation\\">(</span>texts<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span>up_couplet<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> use_gpu<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span> beam_width<span class=\\"token operator\\">=</span>size<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> results<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n    \\n\\n<span class=\\"token keyword\\">if</span> __name__<span class=\\"token operator\\">==</span><span class=\\"token string\\">\\"__main__\\"</span><span class=\\"token punctuation\\">:</span>\\n    Hub <span class=\\"token operator\\">=</span> HubUtils<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">:</span>\\n        input_ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"请选择功能: 1.情话 2.诗歌 3.藏头诗 4.对联 5.退出\\\\n\\"</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> input_ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"1\\"</span><span class=\\"token punctuation\\">:</span>\\n            input_ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"请输入情话关键词:\\\\n&gt;&gt;&gt;\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>Hub<span class=\\"token punctuation\\">.</span>GetLoveWords<span class=\\"token punctuation\\">(</span>input_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">elif</span> input_ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"2\\"</span><span class=\\"token punctuation\\">:</span>\\n            input_ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"请输入诗歌关键词:\\\\n&gt;&gt;&gt;\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>Hub<span class=\\"token punctuation\\">.</span>GetPoetry<span class=\\"token punctuation\\">(</span>input_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">elif</span> input_ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"3\\"</span><span class=\\"token punctuation\\">:</span>\\n            input_ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"请输入藏头诗关键词:\\\\n&gt;&gt;&gt;\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>Hub<span class=\\"token punctuation\\">.</span>GetAcrostic_poetry<span class=\\"token punctuation\\">(</span>input_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">elif</span> input_ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"4\\"</span><span class=\\"token punctuation\\">:</span>\\n            input_ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"请输入上联:\\\\n&gt;&gt;&gt;\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>Hub<span class=\\"token punctuation\\">.</span>GetCouplet<span class=\\"token punctuation\\">(</span>input_<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">elif</span> input_ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"5\\"</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">break</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"爱喝水的木子"},"autoDesc":true}`);export{n as data};
