import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as s,b as n,d as t,e as p}from"./app-dd3d4d63.js";const l={},u=p(`<h2 id="urlencode加密" tabindex="-1"><a class="header-anchor" href="#urlencode加密" aria-hidden="true">#</a> urlencode加密</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># urlencode加密</span>
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse

text <span class="token operator">=</span> <span class="token string">&quot;我爱吃鸡腿&quot;</span>
s <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment"># %E6%88%91%E7%88%B1%E5%90%83%E9%B8%A1%E8%85%BF</span>
u <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token comment">#我爱吃鸡腿</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unicode加密" tabindex="-1"><a class="header-anchor" href="#unicode加密" aria-hidden="true">#</a> unicode加密</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span>
<span class="token comment"># 编码</span>
enStr1 <span class="token operator">=</span> str1<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;unicode-escape&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>enStr1<span class="token punctuation">)</span> <span class="token comment"># \\u4f60\\u597d</span>

<span class="token comment"># 解码</span>
deStr1 <span class="token operator">=</span> enStr1<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;unicode-escape&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>deStr1<span class="token punctuation">)</span> <span class="token comment"># 你好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="base64加密" tabindex="-1"><a class="header-anchor" href="#base64加密" aria-hidden="true">#</a> Base64加密</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64

<span class="token keyword">def</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    encode_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> encode_data

<span class="token keyword">def</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span>encode_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    decode_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>encode_data<span class="token punctuation">)</span>
    <span class="token keyword">return</span> decode_data

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    text <span class="token operator">=</span> <span class="token string">&#39;I love Python!&#39;</span>
    encode_data <span class="token operator">=</span> base64_encode<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    decode_data <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>encode_data<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Base64 编码：&#39;</span><span class="token punctuation">,</span> encode_data<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Base64 解码：&#39;</span><span class="token punctuation">,</span> decode_data<span class="token punctuation">)</span>

    <span class="token comment"># Base64 编码： b&#39;SSBsb3ZlIFB5dGhvbiE=&#39;</span>
<span class="token comment"># Base64 解码： b&#39;I love Python!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="md5" tabindex="-1"><a class="header-anchor" href="#md5" aria-hidden="true">#</a> MD5</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> hashlib

<span class="token keyword">def</span> <span class="token function">md5_test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">&#39;md5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I love python!&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">md5_test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&#39;I love &#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&#39;python!&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    md5_test1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span>
    md5_test2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pbkdf2" tabindex="-1"><a class="header-anchor" href="#pbkdf2" aria-hidden="true">#</a> PBKDF2</h2><p>简介：英文名称：Password-Based Key Derivation Function 2，<br> PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，<br> 2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。<br> PBKDF2 将伪随机函数（例如 HMAC），<br> 把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，<br> 如果重复的次数足够大，破解的成本就会变得很高。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> binascii
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Hash <span class="token keyword">import</span> SHA1
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Protocol<span class="token punctuation">.</span>KDF <span class="token keyword">import</span> PBKDF2

text <span class="token operator">=</span> <span class="token string">&#39;I love Python!&#39;</span>
salt <span class="token operator">=</span> <span class="token string">b&#39;43215678&#39;</span>
result <span class="token operator">=</span> PBKDF2<span class="token punctuation">(</span>text<span class="token punctuation">,</span>  salt<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> hmac_hash_module<span class="token operator">=</span>SHA1<span class="token punctuation">)</span>
result <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sha" tabindex="-1"><a class="header-anchor" href="#sha" aria-hidden="true">#</a> SHA</h2><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），<br> 由美国国家安全局（NSA）所设计，主要适用于数字签名标准<br> （Digital Signature Standard DSS）里面定义的数字签名算法（<br> Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，<br> 分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，<br> 后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，<br> MD5 的密文是 32 位，而 SHA-1 是 40 位，<br> 版本越强，密文越长，代价是速度越慢。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> hashlib

<span class="token keyword">def</span> <span class="token function">sha1_test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sha1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">&#39;sha1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I love python!&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sha1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sha1_test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sha1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sha1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&#39;I love python!&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sha1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    sha1_test1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span>
    sha1_test2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hmac" tabindex="-1"><a class="header-anchor" href="#hmac" aria-hidden="true">#</a> HMAC</h2><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码<br> （英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），<br> 于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash<br> 函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、<br> 对报文进行 Hash 运算，形成固定长度的认证码。通信双方<br> 通过认证码的校验来确定报文的合法性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> hmac

<span class="token keyword">def</span> <span class="token function">hmac_test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    message <span class="token operator">=</span> <span class="token string">b&#39;I love python!&#39;</span>
    key <span class="token operator">=</span> <span class="token string">b&#39;secret&#39;</span>
    md5 <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> message<span class="token punctuation">,</span> digestmod<span class="token operator">=</span><span class="token string">&#39;MD5&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">hmac_test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    key <span class="token operator">=</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    sha1 <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> digestmod<span class="token operator">=</span><span class="token string">&#39;sha1&#39;</span><span class="token punctuation">)</span>
    sha1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&#39;I love &#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sha1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&#39;Python!&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sha1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    hmac_test1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 9c503a1f852edcc3526ea56976c38edf</span>
    hmac_test2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="des" tabindex="-1"><a class="header-anchor" href="#des" aria-hidden="true">#</a> DES</h2><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，<br> 属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），<br> DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，<br> 但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），<br> 由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> binascii
<span class="token comment"># 加密模式 CBC，填充方式 PAD_PKCS5</span>
<span class="token keyword">from</span> pyDes <span class="token keyword">import</span> des<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> PAD_PKCS5

<span class="token keyword">def</span> <span class="token function">des_encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    k <span class="token operator">=</span> des<span class="token punctuation">(</span>key<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> pad<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>
    en <span class="token operator">=</span> k<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>text<span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>
    <span class="token keyword">return</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>en<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">des_decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    k <span class="token operator">=</span> des<span class="token punctuation">(</span>key<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> pad<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>
    de <span class="token operator">=</span> k<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>
    <span class="token keyword">return</span> de

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    secret_key <span class="token operator">=</span> <span class="token string">&#39;12345678&#39;</span>   <span class="token comment"># 密钥</span>
    text <span class="token operator">=</span> <span class="token string">&#39;I love Python!&#39;</span>   <span class="token comment"># 加密对象</span>
    iv <span class="token operator">=</span> secret_key           <span class="token comment"># 偏移量</span>
    secret_str <span class="token operator">=</span> des_encrypt<span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;加密字符串：&#39;</span><span class="token punctuation">,</span> secret_str<span class="token punctuation">)</span>
    clear_str <span class="token operator">=</span> des_decrypt<span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> secret_str<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;解密字符串：&#39;</span><span class="token punctuation">,</span> clear_str<span class="token punctuation">)</span>

    <span class="token comment"># 加密字符串： b&#39;302d3abf2421169239f829b38a9545f1&#39;</span>
    <span class="token comment"># 解密字符串： b&#39;I love Python!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3des" tabindex="-1"><a class="header-anchor" href="#_3des" aria-hidden="true">#</a> 3DES</h2><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、<br> Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。<br> 70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，<br> 它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，<br> 原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，<br> 即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> DES3
<span class="token keyword">from</span> Cryptodome <span class="token keyword">import</span> Random

<span class="token comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span>
<span class="token keyword">def</span> <span class="token function">add_to_16</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        value <span class="token operator">+=</span> <span class="token string">&#39;\\0&#39;</span>
    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">des_encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 加密模式 OFB</span>
    cipher_encrypt <span class="token operator">=</span> DES3<span class="token punctuation">.</span>new<span class="token punctuation">(</span>add_to_16<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> DES3<span class="token punctuation">.</span>MODE_OFB<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    encrypted_text <span class="token operator">=</span> cipher_encrypt<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> encrypted_text

<span class="token keyword">def</span> <span class="token function">des_decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 加密模式 OFB</span>
    cipher_decrypt <span class="token operator">=</span> DES3<span class="token punctuation">.</span>new<span class="token punctuation">(</span>add_to_16<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> DES3<span class="token punctuation">.</span>MODE_OFB<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    decrypted_text <span class="token operator">=</span> cipher_decrypt<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token keyword">return</span> decrypted_text

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    key <span class="token operator">=</span> <span class="token string">&#39;12345678&#39;</span>            <span class="token comment"># 密钥，16 位</span>
    text <span class="token operator">=</span> <span class="token string">&#39;I love Python!&#39;</span>     <span class="token comment"># 加密对象</span>
    iv <span class="token operator">=</span> Random<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span>DES3<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>  <span class="token comment"># DES3.block_size == 8</span>
    secret_str <span class="token operator">=</span> des_encrypt<span class="token punctuation">(</span>key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;加密字符串：&#39;</span><span class="token punctuation">,</span> secret_str<span class="token punctuation">)</span>
    clear_str <span class="token operator">=</span> des_decrypt<span class="token punctuation">(</span>key<span class="token punctuation">,</span> secret_str<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;解密字符串：&#39;</span><span class="token punctuation">,</span> clear_str<span class="token punctuation">)</span>

<span class="token comment"># 加密字符串： b&#39;\\xa5\\x8a\\xd4R\\x99\\x16j\\xba?vg\\xf2\\xb6\\xa9&#39;</span>
<span class="token comment"># 解密字符串： b&#39;I love Python!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aes" tabindex="-1"><a class="header-anchor" href="#aes" aria-hidden="true">#</a> AES</h2><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），<br> 在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，<br> 并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。<br> 这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，<br> 它本身只有一个密钥，即用来实现加密，也用于解密。</p><p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</p><p>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES

<span class="token comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span>
<span class="token keyword">def</span> <span class="token function">add_to_16</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        value <span class="token operator">+=</span> <span class="token string">&#39;\\0&#39;</span>
    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token comment"># 加密方法</span>
<span class="token keyword">def</span> <span class="token function">aes_encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>add_to_16<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> add_to_16<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 初始化加密器</span>
    encrypt_aes <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>add_to_16<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 先进行 aes 加密</span>
    <span class="token comment"># 执行加密并转码返回 bytes</span>
    encrypted_text <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>encodebytes<span class="token punctuation">(</span>encrypt_aes<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>  
    <span class="token keyword">return</span> encrypted_text

<span class="token comment"># 解密方法</span>
<span class="token keyword">def</span> <span class="token function">aes_decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 初始化加密器</span>
    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>add_to_16<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> add_to_16<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span>     
    <span class="token comment"># 优先逆向解密 base64 成 bytes   </span>
    base64_decrypted <span class="token operator">=</span> base64<span class="token punctuation">.</span>decodebytes<span class="token punctuation">(</span>t<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token comment"># 执行解密密并转码返回str </span>
    decrypted_text <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>base64_decrypted<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;\\0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  
    <span class="token keyword">return</span> decrypted_text

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    secret_key <span class="token operator">=</span> <span class="token string">&#39;12345678&#39;</span>   <span class="token comment"># 密钥</span>
    text <span class="token operator">=</span> <span class="token string">&#39;I love Python!&#39;</span>   <span class="token comment"># 加密对象</span>
    iv <span class="token operator">=</span> secret_key           <span class="token comment"># 初始向量</span>
    encrypted_str <span class="token operator">=</span> aes_encrypt<span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;加密字符串：&#39;</span><span class="token punctuation">,</span> encrypted_str<span class="token punctuation">)</span>
    decrypted_str <span class="token operator">=</span> aes_decrypt<span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> encrypted_str<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;解密字符串：&#39;</span><span class="token punctuation">,</span> decrypted_str<span class="token punctuation">)</span>

<span class="token comment"># 加密字符串： lAVKvkQh+GtdNpoKf4/mHA==</span>
<span class="token comment"># 解密字符串： I love Python!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aes-ecb-pkc7-模式" tabindex="-1"><a class="header-anchor" href="#aes-ecb-pkc7-模式" aria-hidden="true">#</a> AES ECB PKC7 模式</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad

<span class="token keyword">def</span> <span class="token function">aes_cipher</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> aes_str<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用key,选择加密方式</span>
    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>
    pad_pkcs7 <span class="token operator">=</span> pad<span class="token punctuation">(</span>aes_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">&#39;pkcs7&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 选择pkcs7补全</span>
    encrypt_aes <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad_pkcs7<span class="token punctuation">)</span>
    <span class="token comment"># 加密结果</span>
    encrypted_text <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>encodebytes<span class="token punctuation">(</span>encrypt_aes<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 解码</span>
    encrypted_text_str <span class="token operator">=</span> encrypted_text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 此处我的输出结果老有换行符，所以用了临时方法将它剔除</span>
    <span class="token keyword">return</span> encrypted_text_str
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rc4" tabindex="-1"><a class="header-anchor" href="#rc4" aria-hidden="true">#</a> RC4</h2><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，<br> 密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。<br> RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，<br> 该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，<br> 虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，<br> 它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，<br> 现在逐渐不推荐使用了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4

<span class="token keyword">def</span> <span class="token function">rc4_encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    enc <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> enc<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>t<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res

<span class="token keyword">def</span> <span class="token function">rc4_decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    enc <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> enc<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    secret_key <span class="token operator">=</span> <span class="token string">&#39;12345678&#39;</span>   <span class="token comment"># 密钥</span>
    text <span class="token operator">=</span> <span class="token string">&#39;I love Python!&#39;</span>   <span class="token comment"># 加密对象</span>
    encrypted_str <span class="token operator">=</span> rc4_encrypt<span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> text<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;加密字符串：&#39;</span><span class="token punctuation">,</span> encrypted_str<span class="token punctuation">)</span>
    decrypted_str <span class="token operator">=</span> rc4_decrypt<span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> encrypted_str<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;解密字符串：&#39;</span><span class="token punctuation">,</span> decrypted_str<span class="token punctuation">)</span>

<span class="token comment"># 加密字符串： b&#39;8tNVu3/U/veJR2KgyBw=&#39;</span>
<span class="token comment"># 解密字符串： b&#39;I love Python!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rabbit" tabindex="-1"><a class="header-anchor" href="#rabbit" aria-hidden="true">#</a> Rabbit</h2><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，<br> 2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p>`,39),r=s("br",null,null,-1),d={href:"https://asecuritysite.com/encryption/rabbit2",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="rsa" tabindex="-1"><a class="header-anchor" href="#rsa" aria-hidden="true">#</a> RSA</h2><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、<br> 阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，<br> RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。<br> 在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。<br> RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> rsa

<span class="token keyword">def</span> <span class="token function">rsa_encrypt</span><span class="token punctuation">(</span>pu_key<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 公钥加密</span>
    rsa <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>t<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pu_key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> rsa

<span class="token keyword">def</span> <span class="token function">rsa_decrypt</span><span class="token punctuation">(</span>pr_key<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 私钥解密</span>
    rsa <span class="token operator">=</span> rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>t<span class="token punctuation">,</span> pr_key<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rsa

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    public_key<span class="token punctuation">,</span> private_key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>newkeys<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>   <span class="token comment"># 生成公钥、私钥</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;公钥：&#39;</span><span class="token punctuation">,</span> public_key<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;私钥：&#39;</span><span class="token punctuation">,</span> private_key<span class="token punctuation">)</span>
    text <span class="token operator">=</span> <span class="token string">&#39;I love Python!&#39;</span>  <span class="token comment"># 加密对象</span>
    encrypted_str <span class="token operator">=</span> rsa_encrypt<span class="token punctuation">(</span>public_key<span class="token punctuation">,</span> text<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;加密字符串：&#39;</span><span class="token punctuation">,</span> encrypted_str<span class="token punctuation">)</span>
    decrypted_str <span class="token operator">=</span> rsa_decrypt<span class="token punctuation">(</span>private_key<span class="token punctuation">,</span> encrypted_str<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;解密字符串：&#39;</span><span class="token punctuation">,</span> decrypted_str<span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
公钥： PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)
私钥： PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)
加密字符串： b&quot;\\x1aaeps\\xa0c}\\xb6\\xcf\\xa3\\xb0\\xbb\\xedA\\x7f}\\x03\\xdc\\xd5\\x1c\\x9b\\xdb\\xda\\xf9q\\x80[=\\xf5\\x91\\r\\xd0&#39;f\\xce\\x1f\\x01\\xef\\xa5\\xdb3\\x96\\t0qIxF\\xbd\\x11\\xd6\\xb25\\xc5\\xe1pM\\xb4M\\xc2\\xd4\\x03\\xa6&quot;
解密字符串： I love Python!
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块-cryptodome" tabindex="-1"><a class="header-anchor" href="#模块-cryptodome" aria-hidden="true">#</a> 模块 Cryptodome</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_v1_5

data <span class="token operator">=</span> <span class="token string">&quot;cKK8B2rWwfwWeXhz&quot;</span>
public_key <span class="token operator">=</span> <span class="token string">&quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span>
rsa_key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>public_key<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 导入读取到的公钥</span>
cipher <span class="token operator">=</span> PKCS1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>rsa_key<span class="token punctuation">)</span>                        <span class="token comment"># 生成对象</span>
cipher_text <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cipher_text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v={href:"https://www.52pojie.cn/thread-1829215-1-1.html",target:"_blank",rel:"noopener noreferrer"};function m(b,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("目前没有找到有第三方库可以直接实现 Rabbit 算法，"),r,n(" 在 Python 中实现可以 "),s("a",d,[n("参考"),t(a)])]),k,s("p",null,[n("出处 "),s("a",v,[n("Python常见的各种加密解密算法_吾爱破解论坛"),t(a)])])])}const g=e(l,[["render",m],["__file","python常见的加解密.html.vue"]]);export{g as default};
